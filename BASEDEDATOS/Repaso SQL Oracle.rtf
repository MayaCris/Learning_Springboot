{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green255\blue0;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sl240\slmult1\f0\fs22\lang10 TIPOS DE DATOS\par
\par

\pard\sl240\slmult1\qc DATOS DE CARACTERES\par

\pard\sl240\slmult1 CHAR\par
NCHAR\par
NVARCHAR2\par
\b VARCHAR2 * \par
\b0 VARCHAR  ==> Alfanumerico\par
LONG\par
RAW\par
LONG RAW\par
\par

\pard\sl240\slmult1\qc DATOS NUMERICOS\par

\pard\sl240\slmult1\b NUMBER * \par
\b0 INT\par
DECIMAL\par
BINARY_FLOAT\par
BINARY_DOUBLE\par
\par

\pard\sl240\slmult1\qc FECHA Y HORA\par

\pard\sl240\slmult1 DATE\par
TIMESTAMP\par
TIMESTAMP WITH TIME ZONE\par
TIMESTAMP WITH LOCAL TIME ZONE\par
INTERVAL\par
\par
\par
\par
\par
\par

\pard\sl240\slmult1\qc EJEMPLO DE CODIGO EN SQL ORACLE\par

\pard\sl240\slmult1\par
CREATE TABLE CATEGORIAS(\par
CA_CODIGO NUMBER(4,0) PRIMARY KEY,\par
CA_DESCRIPCION VARCHAR(100)\par
);\par
\par
CREATE TABLE MEDIDAS(\par
ME_CODIGO NUMBER(3,0) PRIMARY KEY NOT NULL,\par
ME_ABREVIATURA VARCHAR2(3),\par
ME_DESCRIPCION VARCHAR2(20)\par
);\par
\par
CREATE TABLE ARTICULOS(\par
AR_CODIGO NUMBER(5,0),\par
AR_DESCRIPCION VARCHAR2(50),\par
AR_MARCA VARCHAR2(30),\par
ME_CODIGO NUMBER(3,0),\par
CA_CODIGO NUMBER(4,0),\par
FECHA_IN DATE,\par
STOCK_ACTUAL NUMBER(10,2)\par
);\par
\par
DROP TABLE MEDIDAS;\par
DROP TABLE ARTICULOS;\par
DROP TABLE CATEGORIAS;\par
\par
\par
\b --CREAR TABLA ARTICULOS PARA LUEGO HACER MODIFICACIONES --\b0\par
CREATE TABLE ARTICULOS(\par
AR_CODIGO NUMBER(6,0),\par
AR_DESCRIPCION VARCHAR2(50),\par
AR_MARCA VARCHAR2(30)\par
);\par
\par
\b --MODIFICAR CAMPOS DE UNA TABLA--\b0\par
ALTER TABLE CATEGORIAS MODIFY (CA_DESCRIPCION NOT NULL);\par
ALTER TABLE MEDIDAS MODIFY ME_DESCRIPCION VARCHAR2(30);\par
\par
\b --ELIMINAR UNA COLUMNA DE UNA TABLA--\par
\b0 ALTER TABLE ARTICULOS DROP COLUMN AR_MARCA;\par
\par
\b --CAMBIARLE EL VALOR POR DEFECTO DE UNA COLUMNA--\b0\par
ALTER TABLE ARTICULOS MODIFY AR_CODIGO NUMBER(6,0) DEFAULT 0;\par
\par
\b --ADICIONAR UNA O VARIAS COLUMNAS A LA TABLA YA CREADA--\par
\b0 ALTER TABLE ARTICULOS ADD AR_MARCA VARCHAR2(30);\par
ALTER TABLE ARTICULOS ADD (ME_CODIGO NUMBER(3,0), CA_CODIGO NUMBER(4,0));\par
\par
\b --AGREGAR CLAVE PRIMARIA  A TABLA YA CREADA--\par
\b0 ALTER TABLE ARTICULOS ADD PRIMARY KEY(AR_CODIGO);\par
\par
\b --AGREGAR CLAVE FORANEA A TABLA YA CREADA--\par
\b0 ALTER TABLE ARTICULOS\par
ADD CONSTRAINT FK_ME_CODIGO\par
FOREIGN KEY (ME_CODIGO) REFERENCES MEDIDAS(ME_CODIGO);\par
\par
\b --CREAR TABLA ALMACENES CON CODIGO AUTOINCREMENT--\par
\b0 CREATE TABLE ALMACENES (\par
AL_CODIGO NUMBER(2,0) GENERATED ALWAYS AS IDENTITY NOT NULL PRIMARY KEY,\par
AL_DESCRIPCION VARCHAR2(30)\par
);\par
\par
\b --EJEMPLOS INSERTAR INFORMACION EN TABLAS--\par
\b0 INSERT INTO CATEGORIAS(CA_CODIGO,CA_DESCRIPCION) \par
VALUES (1,'OFICINA');\par
INSERT INTO MEDIDAS(ME_CODIGO,ME_ABREVIATURA,DESCRIPCION) \par
VALUES (4,'LTS','LITROS');\par
\par
INSERT INTO ARTICULOS(AR_CODIGO,AR_DESCRIPCION,AR_MARCA,\par
            ME_CODIGO,CA_CODIGO)\par
VALUES (1,'COMPUTADOR','LENOVO',1,1);\par
\par
\par
\par
\par
\b --ACTUALIZAR REGISTROS DE TABLAS EN COLUMNAS SELECCIONADAS CON EL WHERE--\par
\b0 UPDATE ARTICULOS SET AR_MARCA='CANON' WHERE ar_codigo=2;\par
\par
\b --ACTUALIZAR REGISTROS CON VARIOS CRITERIOS--\b0\par
UPDATE ARTICULOS SET AR_MARCA = 'SAMSUNG' WHERE AR_CODIGO IN(3,4);\par
\par
\b --MODIFICAR CAMPOS CON WHERE Y CONCATENAR PARA ADICIONAR TEXTO \par
\b0 UPDATE ARTICULOS SET AR_DESCRIPCION = CONCAT('* ',AR_DESCRIPCION) \par
WHERE AR_MARCA = 'STANDARD';\par
\par
UPDATE ARTICULOS SET FECHA_REGISTRO=SYSDATE;\par
\par
\b\par
--BORRAR REGISTROS EN LA TABLA--\par
\b0\par
 DELETE FROM ARTICULOS WHERE AR_CODIGO IN (5,6);\par
 DELETE FROM ARTICULOS WHERE AR_CODIGO>4;\par
 DELETE FROM ARTICULOS WHERE AR_MARCA='STANDARD'\par
\par
\par
\b --CONSULTAR INFORMACION CON SELECT--\par
\b0 SELECT AR_CODIGO, AR_DESCRIPCION, AR_MARCA FROM ARTICULOS WHERE CA_CODIGO=2;\par
SELECT * FROM ARTICULOS WHERE AR_MARCA IN ('LENOVO', 'CANON')\par
SELECT * FROM ARTICULOS WHERE NOT AR_MARCA IN ('LENOVO', 'CANON')\~ \par
\par
\b --SELECT CON CONDICION ==> CUANDO INICIA CON UNA VARIABLE\par
\b0 SELECT * FROM ARTICULOS WHERE AR_DESCRIPCION LIKE 'R%'\par
\par
SELECT * FROM ARTICULOS WHERE AR_DESCRIPCION LIKE '%OR'\par
\par
\b\par
\b0 -\b -CREAR TABLA NOTAS--\par
\par
\b0 CREATE TABLE NOTAS (\par
AL_CODIGO NUMBER(3,0),\par
AL_NOMBRE VARCHAR2(50),\par
CURSO VARCHAR2(30),\par
NOTA1 NUMBER(2,0),\par
NOTA2 NUMBER(2,0),\par
NOTA3 NUMBER(2,0),\par
PROMEDIO NUMBER(5,2)\par
);\par
\b\par
--OPERADORES--\par
\par
SELECT USANDO SUMA\b0\par
SELECT AL_CODIGO,AL_NOMBRE, NOTA1+NOTA2+NOTA3 AS PROMEDIO2 FROM NOTAS;\par
\par
SELECT AL_CODIGO,AL_NOMBRE, \par
(NOTA1+NOTA2) AS SUMA_NOTA1NOTA2,\par
NOTA3,\par
(NOTA1+NOTA2-NOTA3) AS NOTA1Y2MENOS3\par
FROM NOTAS;\par
\par
\b SELECT USANDO DIVISION\b0\par
SELECT AL_CODIGO, AL_NOMBRE, CURSO,\par
ROUND((NOTA1 + NOTA2 + NOTA3)/3,2) AS PROMEDIO\par
FROM NOTAS\par
\b\par
OPERADORES RELACIONALES\par
\b0 =\tab IGUAL\par
<>\tab DIFERENTE\par
>\tab MAYOR QUE\par
<\tab MENOR QUE\par
>=\tab MAYOR O IGUAL\par
<=\tab MENOR O IGUAL\par
\par
SELECT *FROM NOTAS WHERE NOTA1<>15\par
\par
\b --CONCATENAR DOS FILAS EN UNA SOLA CON SELECT--\par
\b0 SELECT AL_CODIGO, (AL_NOMBRE ||' -- '||CURSO) AS NOMBRE_CURSO \par
FROM NOTAS;\par
\par
\par
\b OPERADORES LOGICOS\par
AND\par
\b0 SELECT * FROM NOTAS WHERE NOTA2>=13 AND NOTA1>=13;\par
\par
\b OR\par
\b0 SELECT * FROM NOTAS WHERE NOTA2=13 OR NOTA3>10;\par
\par
\b NEGACION\par
\b0 SELECT * FROM NOTAS WHERE NOT NOTA3=10;\par
\par
SELECT * FROM NOTAS WHERE NOT (NOTA1>=10 AND NOTA1<=13) OR NOTA2>12;\par
\par
\par
\b FUNCIONES:\par
\par
FUNCIONES DE STRING\par
\b0 SELECT CONCAT('VICTOR - ','CURSO BASE DE DATOS') AS CONCATENAR FROM DUAL;\b\par
\b0 MUESTRA EL EQUIVALENTE AL CODIGO ASCII ==> SELECT CHR(64) FROM DUAL;\par
PONE EN MAYUSCULA INICIAL CADA PALABRA ==> \par
SELECT INITCAP('HOLA VICTOR RAMOS') FROM DUAL;\par
\par
PONE EN MAYUSCULA SOSTENIDO ==> SELECT UPPER('HOLA VICTOR RAMOS') FROM DUAL;\par
PONE EN MINUSCULA ==>  SELECT UPPER('HOLA VICTOR RAMOS') FROM DUAL;\par
\par
ADICIONAR UN CARACTER REPETIDO AL INICIO DE UN TEXTO\par
SELECT LPAD('VICTOR', 11, 'x') FROM DUAL; Y LO MUESTRA  AS\'cd:  xxxxxVICTOR\par
\par
SELECT CONCAT('BOL-',LPAD('1',5,'0')) FROM DUAL; Y LO MUESTRA AS\'cd: BOL-00001\par
\par
RELLENAR TEXTO A LA DERECHA\par
SELECT CONCAT(RPAD('P',10,'0'),1) FROM DUAL;\par
\par
LIMPIEZA DE ESPACIOS DE CADENAS DE TEXTO:\par
SELECT CONCAT(LTRIM('            VICTOR'), 'CESAR') FROM DUAL;\par
\par
SELECT CONCAT(RTRIM('VICTOR                   '), 'CESAR') FROM DUAL;\par
\b\par
\b0 REEMPLAZO DE CARACTERES\par
SELECT REPLACE('DATASAFTA','A','4') AS REEMPLAZO FROM DUAL;\par
Y LO MUSESTRA AS\'cd: D4T4S4FT4\b\par
\par
\b0 SUSTRAER TEXTO\par
SELECT SUBSTR('CADENA DE STRING PARA SUSTRAER TEXTO',17,20) AS SUSTRAER FROM DUAL;\par
\par
LONGITUD DE UNA CADENA DE TEXTO:\par
SELECT LENGTH('CADENA DE STRING PARA SUSTRAER TEXTO') AS TAMA\'d1O_TEXTO FROM DUAL;\par
Y MUESTRA: 36\par
\par
FUNCION QUE RETORNA EL ESPACIO EN DONDE SE ENCUENTRA LA PRIMERA COINCIDENCIA DE UN CRITERIO DE BUSQUEDA EN UNA CADENA DE TEXTO\par
SELECT INSTR('CURSO DE BASE DE DATOS','DE') FROM DUAL;\par
\par
REALIZAR CAMBIOS EN UNA CADENA DE TEXTO SEG\'daN UN CRITERIO:\par
SELECT TRANSLATE('CURSO DE BASE DE DATOS','OES','035') FROM DUAL;\par
Y LO MUESTRA AS\'cd:  CUR50 D3 BA53 D3 DAT05\par
\par
\b FUNCIONES NUMERICAS\par
\b0 REDONDEO DE DECIMALES:\par
\par
SELECT ROUND(135.657,2) FROM DUAL;\par
Y LO MUESTRA: 135.66\par
\par
RECORTAR DECIMALES\par
SELECT TRUNC(135.657,2) FROM DUAL;\par
Y LO MUESTRA AS\'cd: 135.65\par
\par
MUESTRA EL RESIDUO DE UNA DIVISION:\par
SELECT MOD(11,2) FROM DUAL;\par
Y LO MUESTRA AS\'cd: 1\par
\par
CUENTA LA CANTIDAD DE REGISTROS QUE HAY EN UNA TABLA:\par
SELECT COUNT(AR_DESCRIPCION) AS TOTAL_REGISTROS FROM ARTICULOS;\par
Y SE VE AS\'cd: 4\par
\par
SUMA LA COLUMNA SELECCIONADA:\par
SELECT SUM(AR_CODIGO) AS SUMA FROM ARTICULOS;\par
Y LO MUESTRA AS\'cd: 10\par
\par
VALOR MINIMO DE UNA COLUMNA\par
SELECT MIN(AR_CODIGO) FROM ARTICULOS;\par
\par
\par
VALOR PROMEDIO DE UNA COLUMNA\par
SELECT AVG(AR_CODIGO) FROM ARTICULOS;\par
\par
\b\par
FUNCIONES FECHA Y HORA\b0\par
\par
MUESTRA LA FECHA ACTUAL:\par
SELECT CURRENT_DATE FROM DUAL;\par
\par
AGREGAR 2 MESES A LA FECHA INDICADA:\par
SELECT ADD_MONTHS(CURRENT_DATE,2) FROM DUAL;\par
SELECT ADD_MONTHS('25/04/2020',2) FROM DUAL;\par
\par
TRAE EL ULTIMO D\'cdA DEL MES DE LA FECHA QUE LE ESTOY INDICANDO:\par
SELECT LAST_DAY('25/04/2020') FROM DUAL;\par
 Y LO MUESTRA AS\'cd: 30/04/20\par
\par
DIFERENCIA EN MESES DE DOS FECHAS:\line SELECT MONTHS_BETWEEN('01/12/2022','01/01/2021') FROM DUAL;\par
Y LO MUESTRA AS\'cd: 23\par
\par
FUNCION QUE CALCULA EL SIGUIENTE DIA CALENDARIO SEG\'daN EL D\'cdA DE LA SEMANA Y UNA FECHA DE PARTIDA:\par
EJE: CALCULA EL SIGUIENTE LUNES A PARTIR DE LA FECHA 19/12/2022:\par
SELECT NEXT_DAY('19/12/2022', 'LUNES') FROM DUAL;\par
Y LO MUESTRA AS\'cd: 26/12/2022\par
\par
OBTENER FECHA DEL SISTEMA:\par
SELECT SYSDATE FROM DUAL;\par
Y LO MUESTRA AS\'cd:\tab 08/05/24\par
\par
SELECT CURRENT_TIMESTAMP FROM DUAL;\par
Y LO MUESTRA AS\'cd: 08/05/24 03:43:06,029000000 PM AMERICA/BOGOTA\par
\par
SELECT SYSTIMESTAMP FROM DUAL;\par
08/05/24 03:44:45,037000000 PM -05:00\par
\par
EXTRAE EL TIPO DE DATO DE FECHA QUE NECESITO DE UNA FECHA DETERMINADA:\par
SELECT EXTRACT(MONTH FROM SYSDATE) FROM DUAL;\par
5\par
\par
SELECT EXTRACT(DAY FROM SYSDATE) FROM DUAL;\par
8\par
\par
SELECT EXTRACT(DAY FROM NEXT_DAY('19/12/2022', 'MI\'c9RCOLES')) FROM DUAL;\par
21\par
\par
SELECT EXTRACT(YEAR FROM SYSDATE) FROM DUAL;\par
2024\par
\par
PASAR A TIPO STRING:\par
SELECT CONCAT(TO_CHAR(SYSDATE),' FECHA ACTUAL') FROM DUAL;\par
\par
CONVERTIR A FORMATO FECHA Y LE SUMA 2 D\'cdAS:\par
SELECT TO_DATE('19/12/2021')+2 FROM DUAL;\par
\par
\par
\b CONSULTAS DE TABLAS CON INNER JOIN:\line\b0\par
SELECT ARTICULOS.AR_CODIGO,\par
ARTICULOS.AR_DESCRIPCION,\par
ARTICULOS.AR_MARCA,\par
\highlight1 MEDIDAS.DESCRIPCION,\par
CATEGORIAS.CA_DESCRIPCION,\par
\highlight0 ARTICULOS.STOCK_ACTUAL,\par
ARTICULOS.FECHA_REGISTRO\par
\par
FROM ARTICULOS\par
INNER JOIN CATEGORIAS ON ARTICULOS.CA_CODIGO = CATEGORIAS.CA_CODIGO\par
INNER JOIN MEDIDAS ON ARTICULOS.ME_CODIGO = MEDIDAS.ME_CODIGO;\par
\par
\b CONSULTAS DE TABLAS CON LEFT JOIN:\par
\b0 ME TRAE TODO LO DE LA TABLA IZQUIERDA Y LAS COLUMNAS EN COMUN CON LA OTRA TABLA\par
\par
SELECT CATEGORIAS.CA_CODIGO,\par
CATEGORIAS.CA_DESCRIPCION,\par
ARTICULOS.AR_DESCRIPCION,\par
ARTICULOS.AR_MARCA\par
FROM CATEGORIAS\par
LEFT JOIN ARTICULOS ON CATEGORIAS.CA_CODIGO = ARTICULOS.CA_CODIGO;\par
\par
\par
\b CONSULTAS DE TABLAS CON RIGHT JOIN:\par
\b0 ME TRAE TODO LO DE LA TABLA DERECHA Y LAS COLUMNAS EN COMUN CON LA OTRA TABLA\par
Y CON CREACION DE ALIAS PARA LAS TABLAS\par
\par
SELECT A.AR_CODIGO,\par
A.AR_DESCRIPCION,\par
A.AR_MARCA,\par
B.DESCRIPCION\par
FROM ARTICULOS \b A\b0\par
RIGHT JOIN MEDIDAS \b B\b0  ON A.ME_CODIGO = B.ME_CODIGO;\par
\par
\b --ORDENAR CONSULTA DE TABLA POR CRITERIOS ASCENDENTES O DESCENDENTES:\par
\par
\b0 SELECT * FROM ARTICULOS ORDER BY AR_CODIGO DESC;\par
\par
SELECT * FROM ARTICULOS ORDER BY AR_MARCA DESC;\par
\par
SELECT * FROM ARTICULOS ORDER BY AR_DESCRIPCION DESC, AR_MARCA;\par
\par
SELECT * FROM ARTICULOS ORDER BY 3;\par
\par
\par
\par
\b --CLAUSULA WHERE--\par
SE USA EN:\par
\b0 UPDATE\par
DELETE\par
SELECT\par
\par
PUEDE TENER UNA CONDICION SIMPLE O VARIAS CON \b AND\b0  U \b OR\par
\b0 PUEDE USAR OPERADORES DE COMPARACION \par
\par
SELECT * FROM ARTICULOS\par
WHERE STOCK_ACTUAL >0 AND AR_CODIGO=5;\par
\par
UPDATE ARTICULOS SET STOCK_ACTUAL=STOCK_ACTUAL+2\par
WHERE AR_MARCA='STANDARD';\par
\par
DELETE FROM ARTICULOS WHERE AR_MARCA='STANDARD' OR AR_MARCA='LENOVO';\par
DELETE FROM ARTICULOS WHERE AR_MARCA IN ('STANDARD', 'LENOVO')\par
\par
\b --CREAR VISTA QUE GUARDA UN SELECT CON INNER JOIN\par
\b0\par
CREATE VIEW VISTA_ARTICULOS AS\par
SELECT  A.AR_CODIGO,\par
        A.AR_DESCRIPCION,\par
        A.AR_MARCA,\par
        B.DESCRIPCION,\par
        C.CA_DESCRIPCION,\par
        A.STOCK_ACTUAL,\par
        A.FECHA_REGISTRO,\par
        A.ACTIVO\par
FROM ARTICULOS A\par
INNER JOIN MEDIDAS B ON A.ME_CODIGO=B.ME_CODIGO\par
INNER JOIN CATEGORIAS C ON A.CA_CODIGO=C.CA_CODIGO\par
ORDER BY A.AR_CODIGO\par
\par
\b --Y ESA VISTA SE PUEDE LLAMAR CON UN SELECT--\par
\par
\b0 SELECT * FROM VISTA_ARTICULOS;\par
\par
\par
\par
--\b AGRUPAR CON GROUP BY-- \b0\par
SELECT  A.CA_DESCRIPCION,\par
        COUNT(B.AR_DESCRIPCION) AS TOTAL_ARTICULOS\par
FROM CATEGORIAS A\par
INNER JOIN ARTICULOS B ON A.CA_CODIGO=B.CA_CODIGO\par
GROUP BY A.CA_DESCRIPCION;\par
\par
SELECT  AR_MARCA,\par
        COUNT(AR_DESCRIPCION) AS TOTAL_ARTICULOS\par
FROM ARTICULOS\par
GROUP BY AR_MARCA;\par
\par
\par

\pard\sl240\slmult1\qc\b --PROCEDIMIENTOS ALMACENADOS--\par

\pard\sl240\slmult1\b0 ES UN CONJUNTO DE SENTENCIAS,\par
ES UN CONJUNTO DE TAREAS\par
ES UN CONJUNTO DE PPROCESOS\par
ES UN CONJUNTO DE INSTRUCCIONES\par
\par
\par
\par
CREATE OR REPLACE PROCEDURE NOMBREPROCEDIMIENTO (PARAMETRO IN TIPODEDATO)\par
AS NOMBREVARIABLE TIPO;\par
BEGIN INSTRUCCIONES;\par
END;\par
\par
\b CREAR PROCEDIMIENTO\b0\par
CREATE PROCEDURE INSERTAR_REGISTRO_MEDIDAS\par
AS \par
BEGIN\par
    INSERT INTO MEDIDAS(ME_CODIGO, ME_ABREVIATURA,DESCRIPCION)\par
    VALUES(3,'LT','LITROS');\par
    COMMIT;\par
END;\par
\par
\b LLAMAR AL PROCEDIMIENTO\par
\b0 EXECUTE INSERTAR_REGISTRO_MEDIDAS;\par
\par
\b CREAR PROCEDIMIENTO ALMACENADO\b0\par
CREATE OR REPLACE PROCEDURE CRUD_MEDIDAS_CATEGORIAS\par
AS\par
BEGIN\par
    INSERT INTO MEDIDAS\par
    VALUES(4,'MTS','METROS');\par
    UPDATE CATEGORIAS SET CA_DESCRIPCION='EVENTOS 2023'\par
    WHERE CA_CODIGO=3;\par
    COMMIT;\par
END;\par
\par
\b LLAMAR AL PROCEDIMIENTO\b0\par
EXECUTE crud_medidas_categorias;\b\par
\b0\par
\b PARAMETROS EN PROCEDIMIENTOS ALMACENADOS\par
\par
PARAMETRO IN\par
\b0 SE USA PARA ENVIAR VALORES A LOS PROCEDIMIENTOS ALMACENADOS. EL VALOR DEL PARAMETRO NO PUEDE SER REEMPLAZADO\b\par
PARAMETRO OUT\par
\b0 SE USA PARA OBTENER VALORES DE LOS PROCEDIMIENTOS ALMACENADOS. ES SIMILAR A UN RETORNO DE FUNCIONES\b\par
PARAMETRO IN OUT\b0\par
SE USA PARA ENVIAR Y RECIBIR VALORES\par
\par
SI UN PARAMETRO NO SE DEFINE, EL VALOR POR DEFAULT ES IN\par
\par
\b PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR LA TABLA CATEGORIA\b0\par
CREATE OR REPLACE PROCEDURE ACTUALIZAR_CATEGORIA(pCodigo IN INT, pDescripcion IN VARCHAR2)\par
AS\par
BEGIN\par
    UPDATE CATEGORIAS SET CA_DESCRIPCION=pDescripcion\par
    WHERE CA_CODIGO=pCodigo;\par
    COMMIT;\par
END;\par
\par
EXECUTE ACTUALIZAR_CATEGORIA(3, 'EVENTOS ESPECIALES')\par
\par
\b PROCEDIMIENTO ALMACENADO PARA INSERTAR CATEGORIAS:\par
\b0 CREATE PROCEDURE ADD_CATEGORIA(pCodigo IN INT, pDescripcion IN VARCHAR2)\par
AS\par
BEGIN\par
    INSERT INTO CATEGORIAS\par
    VALUES(pCodigo,pDescripcion);\par
    COMMIT;\par
END;\par
\par
EXECUTE ADD_CATEGORIA(5,'EVENTOS SOCIALES')\par
\par
\b PROCEDIMIENTO ALMACENADO PARA CONSULTAR LA NOTA 1 DE UN ALUMNO CON PARAMETROS DE SALIDA:\par
\par
\b0 CREATE PROCEDURE CONSULTAR_NOTA1(pAL_CODIGO NUMBER,\par
                                \tab\tab\tab pNOTA1 OUT NUMBER)\par
AS\par
BEGIN\par
    SELECT NOTA1 \b INTO \b0 pNOTA1 FROM NOTAS\par
    WHERE AL_CODIGO=pAL_CODIGO;\par
END;\par
\b\par
LLAMADO DEL PROCEDIMIENTO ALMACENADO CON PARAMETROS DE SALIDA\par
\b0\par
*\tab ALMACENAR EL PARAMETRO DE SALIDA EN UNA VARIABLE\par
*\tab PASARLE ESA VARIABLE COMO DATO DE SALIDA AL PROCEDIMIENTO ALMACENADO \par
*\tab IMPRIMIR LA VARIABLE PARA QUE ME LA MUESTRE\par
\b\par
\b0 VAR vNOTA1 NUMBER;\par
EXECUTE consultar_nota1(4,:vNOTA1)\par
PRINT vNOTA1;\par
\par
\b PROCEDIMIENTO ALMACENADO PARA CONSULTAR LA DESCRIPCION DE LA MEDIDA PASANDOLE EL CODIGO DE MEDIDA\par
\par
\b0 CREATE PROCEDURE CONSULTAR_DESCRIPCION_MEDIDA(pME_CODIGO IN NUMBER,\par
                                                pDESCRIPCION OUT VARCHAR2)\par
\par
AS\par
BEGIN\par
    SELECT DESCRIPCION INTO pDESCRIPCION FROM MEDIDAS\par
    WHERE ME_CODIGO=pME_CODIGO;\par
END;\par
\par
VAR vDESCRIPCION VARCHAR2;\par
EXECUTE CONSULTAR_DESCRIPCION_MEDIDA(2,:vDESCRIPCION)\par
PRINT vDESCRIPCION;\par
\b\par
\par
PROCEDIMIENTOS CON PARAMETROS DE ENTRADAS Y SALIDAS\par
\b0\par
CREATE PROCEDURE CONSULTAR_DESCRIPCION_MEDIDA2(parametro1 IN OUT VARCHAR2)\par
AS\par
BEGIN\par
    SELECT DESCRIPCION INTO parametro1 \par
    FROM MEDIDAS\par
    WHERE ME_ABREVIATURA=parametro1;\par
END;\par
\par
\b *\tab PARA EJECUTARLO SE DA CLICK SOBRE EL PROCEDIMIENTO ALMACENADO Y SE LE DA \tab EJECUTAR, Y EN EL VALOR DE ENTRADA, SE INGRESA EL VALOR DE LA CONSULTA QUE \tab QUEREMOS REALIZAR.\par
\par

\pard\sl240\slmult1\qc FUNCIONES PERSONALIZADAS\par
\par

\pard\sl240\slmult1  *\tab\b0 SIEMPRE TIENEN PARAMETROS\par
*\tab SIEMPRE TIENEN UN RETORNO DE ALGUN VALOR\par
\par
\b FUNCION PARA SUMAR DOS VALORES:\par
\b0\par
CREATE FUNCTION F_SUMAR(p01 NUMBER,p02 NUMBER)\par
RETURN NUMBER\par
AS\par
BEGIN\par
    RETURN (p01+p02);\par
END;\b\par
\par
FUNCION PARA PASAR UNA CADENA DE TEXTO A MAYUSCULA\par
\par
\b0 CREATE FUNCTION F_MAYUSCULA(texto VARCHAR2)\par
RETURN VARCHAR2\par
AS\par
BEGIN\par
    RETURN UPPER(texto);\par
END;\par
\par
\b DEFINIR UNA FUNCION PARA EVALUAR MI EDAD:\par
SI EDAD MENOR A 18, ES MENOR DE EDAD. \par
SI TIENE 18 O MAS, ES MAYOR DE EDAD.\par
\b0\par
CREATE OR REPLACE FUNCTION EVALUAR_EDAD(pEDAD NUMBER)\par
RETURN VARCHAR2\par
AS\par
    V_RETORNO VARCHAR2(50);\par
    \par
BEGIN\par
    IF pEDAD<18 THEN\par
        V_RETORNO:='ERES MENOR DE EDAD';\par
    ELSE\par
        V_RETORNO:='ERES UN ADULTO';\par
    END IF;\par
    RETURN V_RETORNO;\par
END;\par
\par
\par

\pard\sl240\slmult1\qc\b PROYECTO ACTIVOS FIJOS\b0\par

\pard\sl240\slmult1 create user ASSETADMIN identified by "admin";\b\par
\par
AssetManagement bd\par
\par
\par
\b0 CREATE TABLE ASSET_TYPE(\par
TYPE_ID NUMBER(4,0) GENERATED ALWAYS AS IDENTITY NOT NULL PRIMARY KEY,\par
TYPE_NAME VARCHAR2(50),\par
DEPRECIATION_TIME_MONTHS NUMBER(5,1)\par
);\par
\par
CREATE TABLE LOCATIONS (\par
LOCATION_ID NUMBER(4,0) GENERATED ALWAYS AS IDENTITY NOT NULL PRIMARY KEY,\par
LOCATION_NAME VARCHAR2(50),\par
LOCATION_ADDRESS VARCHAR2(50),\par
LOCATION_CITY VARCHAR2(50),\par
LOCATION_COUNTRY VARCHAR2(50)\par
);\par
\par
CREATE TABLE RESPONSIBLE_PERSON(\par
PERSON_ID VARCHAR2(20) PRIMARY KEY NOT NULL,\par
PERSON_NAME VARCHAR2(50),\par
PERSON_DEPARTMENT VARCHAR2(50)\par
);\par
\par
CREATE TABLE FIXED_ASSETS(\par
ASSET_ID NUMBER(10,0) GENERATED ALWAYS AS IDENTITY NOT NULL PRIMARY KEY,\par
ASSET_COD VARCHAR2(30),\par
ASSET_NAME VARCHAR(100),\par
ASSET_DESCRIPTION VARCHAR(200),\par
TYPE_ID NUMBER(2,0),\par
ACQUISITION_DATE DATE,\par
ACQUISITION_VALUE NUMBER(20,2),\par
LOCATION_ID NUMBER(4,0),\par
PERSON_ID VARCHAR2(20),\par
CONSTRAINT FK_TYPE_ID FOREIGN KEY (TYPE_ID) REFERENCES ASSET_TYPE(TYPE_ID),\par
CONSTRAINT FK_LOCATION_ID FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID),\par
CONSTRAINT FK_PERSON_ID FOREIGN KEY (PERSON_ID) REFERENCES RESPONSIBLE_PERSON(PERSON_ID)\par
);\par
\par
CREATE TABLE DEPRECIATION (\par
DEPRECIATION_ID NUMBER(10,0) GENERATED ALWAYS AS IDENTITY NOT NULL PRIMARY KEY,\par
ASSET_ID NUMBER(10,0)NOT NULL,\par
DEPRECIATION_DATE DATE,\par
DEPRECIATION_VALUE NUMBER(20,2),\par
CONSTRAINT FK_ASSET_ID FOREIGN KEY (ASSET_ID) REFERENCES FIXED_ASSETS(ASSET_ID)\par
);\par
\par
--PROCEDIMIENTOS ALMACENADOS PARA INSERTAR Y ACTUALIZAR DATOS--\par
\par
\par
--PROCEDIMIENTO PARA INGRESAR TIPO DE ACTIVO--\par
CREATE PROCEDURE ADD_ASSET_TYPE(pTYPE_NAME VARCHAR2, pDEPRECIATION_TIME_MONTHS NUMBER)\par
AS\par
BEGIN\par
    INSERT INTO ASSET_TYPE(TYPE_NAME, DEPRECIATION_TIME_MONTHS)\par
    VALUES (pTYPE_NAME,pDEPRECIATION_TIME_MONTHS);\par
    COMMIT;\par
END;\par
\par
EXECUTE ADD_ASSET_TYPE('EQUIPO DE COMUNICACION', 60)\par
\par
-- VER LOS TIPOS DE ACTIVOS CREADOS--\par
\par
\par
SELECT  CONCAT('TYPE-',LPAD(TYPE_ID,4,'0')) AS ID, TYPE_NAME AS NAME, \par
        DEPRECIATION_TIME_MONTHS AS TIME_MONTHS\par
FROM ASSET_TYPE;\par
\par
\par
\par
--PROCEDIMIENTO PARA MODIFICAR EL TIPO DE ACTIVO\par
\par
CREATE OR REPLACE PROCEDURE UPDATE_ASSET_TYPE(pTYPE_ID NUMBER, pTYPE_NAME VARCHAR2, pDEPRECIATION_TIME_MONTHS NUMBER)\par
AS\par
BEGIN\par
    UPDATE ASSET_TYPE SET TYPE_NAME=pTYPE_NAME, DEPRECIATION_TIME_MONTHS=pDEPRECIATION_TIME_MONTHS\par
    WHERE TYPE_ID=pTYPE_ID;\par
    COMMIT;\par
            \par
END;\par
\par
--PROCEDIMIENTO PARA INGRESAR UNA UBICACION --\par
\par
CREATE PROCEDURE ADD_LOCATION(\par
                pLOCATION_NAME VARCHAR2, \par
                pLOCATION_ADDRESS VARCHAR2,\par
                pLOCATION_CITY VARCHAR2,\par
                pLOCATION_COUNTRY VARCHAR2\par
                )\par
AS\par
BEGIN\par
    INSERT INTO LOCATIONS(LOCATION_NAME,LOCATION_ADDRESS,LOCATION_CITY,LOCATION_COUNTRY)\par
    VALUES (pLOCATION_NAME, pLOCATION_ADDRESS,pLOCATION_CITY, pLOCATION_COUNTRY);\par
    COMMIT;\par
END;\par
\par
EXECUTE ADD_LOCATION('SEDE SUR', 'CRA 35 N 48A 23', 'SABANETA', 'COLOMBIA');\par
\par
SELECT * FROM LOCATIONS;\par
\par
--PROCEDIMIENTO PARA ACTUALIZAR UNA UBICACION--\par
\par
CREATE PROCEDURE UPDATE_LOCATION(\par
                pLOCATION_ID NUMBER,\par
                pLOCATION_NAME VARCHAR2, \par
                pLOCATION_ADDRESS VARCHAR2,\par
                pLOCATION_CITY VARCHAR2,\par
                pLOCATION_COUNTRY VARCHAR2\par
                               \par
)\par
AS\par
BEGIN\par
    UPDATE LOCATIONS SET LOCATION_NAME=pLOCATION_NAME,\par
                        LOCATION_ADDRESS=pLOCATION_ADDRESS,\par
                        LOCATION_CITY=pLOCATION_CITY,\par
                        LOCATION_COUNTRY=pLOCATION_COUNTRY\par
\par
    WHERE LOCATION_ID=pLOCATION_ID;\par
    COMMIT;\par
END;\par
\par
--PROCEDIMIENTO ALMACENADO PARA INGRESAR PERSONAS--\par
\par
CREATE PROCEDURE ADD_PERSON(\par
                    pPERSON_ID VARCHAR2,\par
                    pPERSON_NAME VARCHAR2,\par
                    pPERSON_DEPARTMENT VARCHAR2\par
                        \par
)\par
AS\par
BEGIN\par
    INSERT INTO RESPONSIBLE_PERSON(\par
                        PERSON_ID,\par
                        PERSON_NAME,\par
                        PERSON_DEPARTMENT\par
                        )\par
            \par
    VALUES(pPERSON_ID, pPERSON_NAME,pPERSON_DEPARTMENT);\par
    COMMIT;\par
END;\par
\par
EXECUTE ADD_PERSON('12345','ANDRES EJEMPLO', 'GESTION HUMANA')\par
\par
SELECT * FROM RESPONSIBLE_PERSON;\par
\par
\par
--MODIFICAR DATOS DE LAS PERSONAS RESPONSABLES--\par
\par
CREATE OR REPLACE PROCEDURE UPDATE_PERSON(\par
                pPERSON_ID VARCHAR2,\par
                pPERSON_NAME VARCHAR2,\par
                pPERSON_DEPARTMENT VARCHAR2                     \par
)\par
AS\par
BEGIN\par
    UPDATE RESPONSIBLE_PERSON SET\par
                        PERSON_NAME=pPERSON_NAME,\par
                        PERSON_DEPARTMENT=pPERSON_DEPARTMENT\par
                        \par
    WHERE PERSON_ID=pPERSON_ID;\par
    COMMIT;\par
END;\par
\par
\par
--CREAR UN ACTIVO FIJO--\par
\par
CREATE OR REPLACE PROCEDURE ADD_ASSET (\par
                        pASSET_COD VARCHAR2,\par
                        pASSET_NAME VARCHAR2,\par
                        pASSET_DESCRIPTION VARCHAR2,\par
                        pTYPE_ID NUMBER,\par
                        pACQUISITION_DATE DATE,\par
                        pACQUISITION_VALUE NUMBER,\par
                        pLOCATION_ID NUMBER,\par
                        pPERSON_ID VARCHAR2\par
)\par
AS\par
BEGIN\par
    INSERT INTO FIXED_ASSETS (\par
                    ASSET_COD,\par
                    ASSET_NAME,\par
                    ASSET_DESCRIPTION,\par
                    TYPE_ID,\par
                    ACQUISITION_DATE,\par
                    ACQUISITION_VALUE,\par
                    LOCATION_ID,\par
                    PERSON_ID\par
    )\par
    VALUES(\par
            pASSET_COD,\par
            pASSET_NAME,\par
            pASSET_DESCRIPTION,\par
            pTYPE_ID,\par
            pACQUISITION_DATE,\par
            pACQUISITION_VALUE,\par
            pLOCATION_ID,\par
            pPERSON_ID\par
    );\par
    COMMIT;\par
END;\par
\par
EXECUTE ADD_ASSET('ASSET.V.001','PORTATIL HP', 'HP 16GB I7 207ED106', 5,'10/01/2024',3200000,1,'104582545');\par
EXECUTE ADD_ASSET('ASSET.V.002','PORTATIL', 'LENOVO 16GB I5 ', 5,'19/03/2024',3500000,1,'104582545');\par
EXECUTE ADD_ASSET('ASSET.V.003','ESCRITORIO', 'ESCRITORIO EN L FINLANDEK', 4,'05/02/2024',6800000,1,'12345');\par
EXECUTE ADD_ASSET('ASSET.V.004','MESA REUNIONES', 'MESA REUNIONES STANDARD', 4,'01/02/2024',10400000,1,'12345');\par
EXECUTE ADD_ASSET('ASSET.V.005','CELULAR SAMSUNG ', 'S24 ULTRA', 6,'01/02/2024',6100000,2,'12345');\par
\par
SELECT * FROM FIXED_ASSETS;\par
\par
\par
CREATE OR REPLACE PROCEDURE UPDATE_ASSET (\par
                        pASSET_ID NUMBER,\par
                        pASSET_COD VARCHAR2,\par
                        pASSET_NAME VARCHAR2,\par
                        pASSET_DESCRIPTION VARCHAR2,\par
                        pTYPE_ID NUMBER,\par
                        pACQUISITION_DATE DATE,\par
                        pACQUISITION_VALUE NUMBER,\par
                        pLOCATION_ID NUMBER,\par
                        pPERSON_ID VARCHAR2\par
)\par
AS\par
BEGIN\par
    UPDATE FIXED_ASSETS SET \par
                        ASSET_COD=pASSET_COD,\par
                        ASSET_NAME=pASSET_NAME,\par
                        ASSET_DESCRIPTION=pASSET_DESCRIPTION,\par
                        TYPE_ID=pTYPE_ID,\par
                        ACQUISITION_DATE=pACQUISITION_DATE,\par
                        ACQUISITION_VALUE=pACQUISITION_VALUE,\par
                        LOCATION_ID=pLOCATION_ID,\par
                        PERSON_ID=pPERSON_ID\par
    WHERE ASSET_ID=pASSET_ID;\par
    \par
    COMMIT;\par
END;\par
\par
CREATE FUNCTION CALCULATE_DEPRECIATION(\par
                            pDEPRECIATION_TIME_MONTHS NUMBER,\par
                            pACQUISITION_VALUE NUMBER\par
)\par
RETURN NUMBER\par
AS pDEPRECIATION_VALUE NUMBER;\par
BEGIN\par
    RETURN ROUND((pACQUISITION_VALUE / pDEPRECIATION_TIME_MONTHS),2);\par
END;\par
\par
\par
CREATE OR REPLACE FUNCTION CONSULT_TIME_DEPRECIATION (pASSET_ID IN NUMBER)\par
RETURN NUMBER\par
AS\par
    vDEPRECIATION_TIME_MONTHS NUMBER;\par
BEGIN\par
    SELECT ASSET_TYPE.DEPRECIATION_TIME_MONTHS INTO vDEPRECIATION_TIME_MONTHS\par
    FROM FIXED_ASSETS \par
    INNER JOIN ASSET_TYPE ON FIXED_ASSETS.TYPE_ID = ASSET_TYPE.TYPE_ID\par
    \par
    WHERE FIXED_ASSETS.ASSET_ID = pASSET_ID;\par
    RETURN vDEPRECIATION_TIME_MONTHS;\par
END;\par
\par
\par
\par
---FIN DE LA FUNCION--------------------------------------------\par
\par
\par
CREATE FUNCTION ACQUISITION_V (pASSET_ID IN NUMBER)\par
RETURN NUMBER\par
AS\par
    vVALUE NUMBER;\par
BEGIN\par
    SELECT ACQUISITION_VALUE INTO vVALUE\par
    FROM FIXED_ASSETS\par
    WHERE ASSET_ID = pASSET_ID;\par
    RETURN vVALUE;\par
END;\par
\par
\par
CREATE OR REPLACE PROCEDURE ADD_DEPRECIATION(\par
                        pASSET_ID NUMBER,\par
                        pDEPRECIATION_DATE DATE\par
)\par
AS\par
BEGIN\par
    INSERT INTO DEPRECIATION (\par
                        ASSET_ID,\par
                        DEPRECIATION_DATE,\par
                        DEPRECIATION_VALUE\par
    )\par
    VALUES(\par
            pASSET_ID,\par
            pDEPRECIATION_DATE,\par
            ROUND(CALCULATE_DEPRECIATION(\par
                    CONSULT_TIME_DEPRECIATION(pASSET_ID),\par
                    ACQUISITION_V(pASSET_ID)\par
            ),0)\par
            \par
    );\par
    COMMIT;\par
END;\par
\par
SELECT * FROM DEPRECIATION;\par
\par
\par
--CREAR VISTA PARA VER LA INFORMACION DETALLADA DE LOS ACTIVOS--\par
\par
CREATE OR REPLACE VIEW ASSETS AS\par
\par
    SELECT  FA.ASSET_ID,\par
            FA.ASSET_COD,\par
            FA.ASSET_NAME,\par
            FA.ASSET_DESCRIPTION,\par
            AT.TYPE_NAME,\par
            AT.DEPRECIATION_TIME_MONTHS,\par
            L.LOCATION_NAME,\par
            L.LOCATION_ADDRESS,\par
            RP.PERSON_NAME,\par
            RP.PERSON_DEPARTMENT,\par
            D.DEPRECIATION_VALUE\par
                \par
    FROM FIXED_ASSETS FA\par
    INNER JOIN ASSET_TYPE AT ON FA.TYPE_ID = AT.TYPE_ID\par
    INNER JOIN LOCATIONS L ON FA.LOCATION_ID = L.LOCATION_ID\par
    INNER JOIN RESPONSIBLE_PERSON RP ON FA.PERSON_ID = RP.PERSON_ID\par
    INNER JOIN DEPRECIATION D ON FA.ASSET_ID = D.ASSET_ID;\par
\par
\par
SELECT * FROM ASSETS;\par
\par
SELECT * FROM FIXED_ASSETS;\par
\par
--CREAR VISTA QUE MUESTRE EL TOTAL DEPRECIACION POR ACTIVO-- \par
\par
CREATE OR REPLACE VIEW SUBTOTAL_DEPRECIATION AS\par
    \par
    SELECT  \par
            FA.ASSET_NAME,\par
            SUM(D.DEPRECIATION_VALUE) AS SUBTOTAL_DEPRECIATION\par
                        \par
    FROM DEPRECIATION D\par
    INNER JOIN FIXED_ASSETS FA ON D.ASSET_ID = FA.ASSET_ID\par
    GROUP BY FA.ASSET_NAME;\par
\par
\par
----------------------------------------------------------------------------\par
SELECT FA.ASSET_NAME, SUM(D.DEPRECIATION_VALUE) AS SUBTOTAL_DEPRECIATION\par
FROM DEPRECIATION D\par
INNER JOIN FIXED_ASSETS FA ON D.ASSET_ID = FA.ASSET_ID\par
GROUP BY FA.ASSET_NAME;\par
\par
\par
---CREAR UNA VISTA QUE MUESTRE EL TOTAL DEPRECIACION\par
\par
CREATE OR REPLACE VIEW TOTAL_DEPRECIATION AS\par
    \par
    SELECT  \par
            SUM(D.DEPRECIATION_VALUE) AS TOTAL_DEPRECIATION\par
                        \par
    FROM DEPRECIATION D\par
    INNER JOIN FIXED_ASSETS FA ON D.ASSET_ID = FA.ASSET_ID;\par
    \par
    \par
--CREAR UNA VISTA QUE MUESTRE LA CANTIDAD DE ACTIVOS POR CIUDAD---    \par
\par
\par
CREATE OR REPLACE VIEW ASSETS_PER_CITY AS\par
    SELECT\par
            L.LOCATION_CITY,\par
            COUNT(FA.ASSET_NAME) AS ASSETS\par
    FROM LOCATIONS L\par
    INNER JOIN FIXED_ASSETS FA ON L.LOCATION_ID = FA.LOCATION_ID\par
    GROUP BY L.LOCATION_CITY;\par
            \par
\par
\b\par
\par
\par
\b0\par
\par
\par
\par
}
 