UPDATE ARTICULOS SET STOCK_ACTUAL=STOCK_ACTUAL+2
WHERE AR_MARCA='STANDARD';

SELECT * FROM ARTICULOS;

DELETE FROM ARTICULOS WHERE AR_MARCA='STANDARD' OR AR_MARCA='LENOVO';

DELETE FROM ARTICULOS WHERE AR_MARCA IN ('STANDARD', 'LENOVO');

SELECT * FROM ARTICULOS;

SELECT  A.AR_CODIGO,
        A.AR_DESCRIPCION,
        A.AR_MARCA,
        B.DESCRIPCION,
        C.CA_DESCRIPCION,
        A.STOCK_ACTUAL,
        A.FECHA_REGISTRO,
        A.ACTIVO
FROM ARTICULOS A
INNER JOIN MEDIDAS B ON A.ME_CODIGO=B.ME_CODIGO
INNER JOIN CATEGORIAS C ON A.CA_CODIGO=C.CA_CODIGO
ORDER BY A.AR_CODIGO;

CREATE VIEW VISTA_ARTICULOS AS
SELECT  A.AR_CODIGO,
        A.AR_DESCRIPCION,
        A.AR_MARCA,
        B.DESCRIPCION,
        C.CA_DESCRIPCION,
        A.STOCK_ACTUAL,
        A.FECHA_REGISTRO,
        A.ACTIVO
FROM ARTICULOS A
INNER JOIN MEDIDAS B ON A.ME_CODIGO=B.ME_CODIGO
INNER JOIN CATEGORIAS C ON A.CA_CODIGO=C.CA_CODIGO
ORDER BY A.AR_CODIGO;

SELECT * FROM VISTA_ARTICULOS;

SELECT  A.CA_DESCRIPCION,
        COUNT(B.AR_DESCRIPCION) AS TOTAL_ARTICULOS
FROM CATEGORIAS A
INNER JOIN ARTICULOS B ON A.CA_CODIGO=B.CA_CODIGO
GROUP BY A.CA_DESCRIPCION;


SELECT  AR_MARCA,
        COUNT(AR_DESCRIPCION) AS TOTAL_ARTICULOS
FROM ARTICULOS
GROUP BY AR_MARCA;


SELECT  CURSO,
        SUM(NOTA1) AS TOTAL_SUMA_NOTA1
FROM NOTAS
GROUP BY CURSO;

INSERT INTO NOTAS 
VALUES(5,'JUAN','INGLES',11,12,10,0);

SELECT * FROM NOTAS ORDER BY AL_CODIGO;

DELETE FROM NOTAS WHERE AL_CODIGO=5;


--PROCEDIMIENTOS ALMACENADOS--

CREATE PROCEDURE INSERTAR_REGISTRO_MEDIDAS
AS 
BEGIN
    INSERT INTO MEDIDAS(ME_CODIGO, ME_ABREVIATURA,DESCRIPCION)
    VALUES(3,'LT','LITROS');
    COMMIT;
END;

EXECUTE INSERTAR_REGISTRO_MEDIDAS;


CREATE OR REPLACE PROCEDURE CRUD_MEDIDAS_CATEGORIAS
AS
BEGIN
    INSERT INTO MEDIDAS
    VALUES(4,'MTS','METROS');
    UPDATE CATEGORIAS SET CA_DESCRIPCION='EVENTOS 2023'
    WHERE CA_CODIGO=3;
    COMMIT;
END;

EXECUTE crud_medidas_categorias;



CREATE OR REPLACE PROCEDURE ACTUALIZAR_CATEGORIA(pCodigo IN INT, pDescripcion IN VARCHAR2)
AS
BEGIN
    UPDATE CATEGORIAS SET CA_DESCRIPCION=pDescripcion
    WHERE CA_CODIGO=pCodigo;
    COMMIT;
END;

EXECUTE ACTUALIZAR_CATEGORIA(3, 'EVENTOS ESPECIALES')

CREATE PROCEDURE ADD_CATEGORIA(pCodigo IN INT, pDescripcion IN VARCHAR2)
AS
BEGIN
    INSERT INTO CATEGORIAS
    VALUES(pCodigo,pDescripcion);
    COMMIT;
END;

EXECUTE ADD_CATEGORIA(5,'EVENTOS SOCIALES')

CREATE PROCEDURE GUARDAR_AR(pAR_CODIGO NUMBER,
                            pAR_DESCRIPCION VARCHAR2,
                            pAR_MARCA VARCHAR2,
                            pME_CODIGO NUMBER,
                            pCA_CODIGO NUMBER,
                            PSTOCK_ACTUAL NUMBER,
                            pFECHA_REGISTRO DATE,
                            pACTIVO NUMBER)
AS
BEGIN
    INSERT INTO ARTICULOS
    VALUES(pAR_CODIGO,
            pAR_DESCRIPCION,
            pAR_MARCA,
            pME_CODIGO,
            pCA_CODIGO,
            PSTOCK_ACTUAL,
            pFECHA_REGISTRO,
            pACTIVO);
    COMMIT;        
END;


EXECUTE GUARDAR_AR(7,'NUEVO ARTICULO', 'MARCA NUEVA',1,4,5,SYSDATE,1)

CREATE PROCEDURE CONSULTAR_NOTA1(pAL_CODIGO NUMBER,
                                pNOTA1 OUT NUMBER)
AS
BEGIN
    SELECT NOTA1 INTO pNOTA1 FROM NOTAS
    WHERE AL_CODIGO=pAL_CODIGO;
END;

VAR vNOTA1 NUMBER;
EXECUTE consultar_nota1(4,:vNOTA1)
PRINT vNOTA1;


CREATE PROCEDURE CONSULTAR_DESCRIPCION_MEDIDA(pME_CODIGO IN NUMBER,
                                                pDESCRIPCION OUT VARCHAR2)

AS
BEGIN
    SELECT DESCRIPCION INTO pDESCRIPCION FROM MEDIDAS
    WHERE ME_CODIGO=pME_CODIGO;
END;

VAR vDESCRIPCION VARCHAR2;
EXECUTE CONSULTAR_DESCRIPCION_MEDIDA(2,:vDESCRIPCION)
PRINT vDESCRIPCION;

CREATE PROCEDURE CONSULTAR_DESCRIPCION_MEDIDA2(parametro1 IN OUT VARCHAR2)
AS
BEGIN
    SELECT DESCRIPCION INTO parametro1 
    FROM MEDIDAS
    WHERE ME_ABREVIATURA=parametro1;
END;



CREATE FUNCTION F_SUMAR(p01 NUMBER,p02 NUMBER)
RETURN NUMBER
AS
BEGIN
    RETURN (p01+p02);
END;


CREATE FUNCTION F_MAYUSCULA(texto VARCHAR2)
RETURN VARCHAR2
AS
BEGIN
    RETURN UPPER(texto);
END;

CREATE OR REPLACE FUNCTION EVALUAR_EDAD(pEDAD NUMBER)
RETURN VARCHAR2
AS
    V_RETORNO VARCHAR2(50);
    
BEGIN
    IF pEDAD<18 THEN
        V_RETORNO:='ERES MENOR DE EDAD';
    ELSE
        V_RETORNO:='ERES UN ADULTO';
    END IF;
    RETURN V_RETORNO;
END;


SELECT EVALUAR_EDAD(18) FROM DUAL;



